@page "/chat"
@using Models
@using Data
@using Microsoft.AspNetCore.SignalR.Client

<div class="chatbox-parent">
    <div class="chat-box">
        @foreach (var message in UserMessages)
        {
            <div class="chat-message">
                <span class="user">@message.User:</span>
                <span>@message.Message</span>
            </div>
        }


        <input @bind-value="@messageInput" type="text" placeholder="Send message" />
        <button @onclick="SendMessageAsync" type="submit">Send</button>
        <button @onclick="OnRoomDisconnect" type="button">Leave Room</button>
    </div>
    <UserList @ref="UserListComponent" currentUser="@UserConnection" />
</div>

@code {
    [Parameter] public List<UserMessage> UserMessages { get; set; }
    [Parameter] public HubConnection HubConnection { get; set; }
    [Parameter] public UserConnection UserConnection { get; set; }
    [Parameter] public List<UserConnection> UsersInRoom { get; set; }
    private string messageInput;
    private UserMessage userMessage;
    private bool IsConnected { get; set; }
    [Parameter] public EventCallback<bool> OnRoomDisconnected { get; set; }
    protected UserList UserListComponent;

    protected override void OnAfterRender(bool firstRender)
    {
        UserListComponent.RefreshList();
    }

    private async Task SendMessageAsync()
    {
        if (messageInput != null)
        {
            userMessage = new UserMessage()
            {
                DateSent = DateTime.Now,
                Message = messageInput,
                User = UserConnection.User
            };
            await HubConnection.SendAsync("SendMessage", userMessage);
            messageInput = "";
        }
    }

    private async Task OnRoomDisconnect()
    {
        await HubConnection.SendAsync("LeaveRoomAsync", UserConnection);
        await HubConnection.StopAsync();
        IsConnected = HubConnection.State == HubConnectionState.Connected;
        await OnRoomDisconnected.InvokeAsync(IsConnected);
    }


}
