@page "/todo"
@using Models
@using Services;

@if (todos != null && todos.Count() > 0) {
      <table>
            @foreach (var todo in todos)
            {
                <tr>
                <td>@todo.Item</td>
                <td>
                    <i class="material-icons" @onclick="() => DeleteTodo(todo.Id)">
                        delete
                    </i>
                </td>
                <td>
                    <i class="material-icons" @onclick="() => EditTodo(todo.Id, todo)">
                        edit
                    </i>
                </td>
                </tr>
            }
      </table>
}

<input placeholder="Add Item" @bind-value="todoItemValue" />
<button @onclick="AddTodo">Add</button>

<div>@errorValue</div>

@code {
    [Inject]
    public ITodoListService TodoListService { get; set; }
    public TodoListModel NewTodoItem { get; set; }
    public string todoItemValue;
    public string errorValue;

    IEnumerable<TodoListModel> todos = new List<TodoListModel>();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        errorValue = "";
    }

    private async Task Refresh()
    {
        todos = await TodoListService.GetTodos();
        StateHasChanged();
    }

    private async Task AddTodo()
    {
        if (!String.IsNullOrEmpty(todoItemValue))
        {
            NewTodoItem = new TodoListModel
            {
                Id = todos.Count() + 1,
                Item = todoItemValue
            };

            await TodoListService.CreateTodoItem(NewTodoItem);
            todos = await TodoListService.GetTodos();
        } else
        {
            errorValue = "There's nothing to add, pal!";
        }
        StateHasChanged();
    }

    private async Task DeleteTodo(int id)
    {
        await TodoListService.DeleteTodoItem(id);
    }

    private async Task EditTodo(int id, TodoListModel todoListItem)
    {
        await TodoListService.EditTodoItem(todoListItem, id);
    }
}
