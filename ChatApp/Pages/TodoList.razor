@page "/todo"
@using Models
@using Services;

@if (todos != null && todos.Count() > 0) {
      <table>
            @foreach (var todo in todos.Select((value, index) => new { value, index }))
            {
                <tr>
                @if (IsEditing.Count() > 0 && IsEditing[todo.index].Equals(true))
                {
                    <td><input value="@todo.value.Item" @oninput="(e) => todo.value.Item = e.Value.ToString()"/></td>
                } else
                {
                    <td>@todo.value.Item</td>
                }
                <td>
                    <i class="material-icons" @onclick="() => DeleteTodo(todo.value.Id)">
                        delete
                    </i>
                </td>
                <td>
                    <i class="material-icons" @onclick="() => SetIsEditing(todo.index)">
                        edit
                    </i>
                </td>
                <td>
                    <i class="material-icons" @onclick="() => EditTodo(todo.value.Id, new TodoListModel { Id = todo.value.Id, Item = todo.value.Item} )">
                        save
                    </i>
                </td>
                </tr>
            }
      </table>
}

<input placeholder="Add Item" @bind-value="todoItemValue" />
<button @onclick="AddTodo">Add</button>

<div>@errorValue</div>

@code {
    [Inject]
    public ITodoListService TodoListService { get; set; }
    public TodoListModel NewTodoItem { get; set; }
    public string todoItemValue;
    public string errorValue;
    bool[] IsEditing;
    int count = 0;

    IEnumerable<TodoListModel> todos = new List<TodoListModel>();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        errorValue = "";
    }

    private async Task Refresh()
    {
        todos = await TodoListService.GetTodos();
        IsEditing = new bool[todos.Count()];
        StateHasChanged();
    }

    private async Task AddTodo()
    {
        if (!String.IsNullOrEmpty(todoItemValue))
        {
            NewTodoItem = new TodoListModel
            {
                Id = todos.Count() + 1,
                Item = todoItemValue
            };

            await TodoListService.CreateTodoItem(NewTodoItem);
            todos = await TodoListService.GetTodos();
            IsEditing = new bool[todos.Count()];
        } else
        {
            errorValue = "There's nothing to add, pal!";
        }
        StateHasChanged();
    }

    private async Task DeleteTodo(int id)
    {
        await TodoListService.DeleteTodoItem(id);
        await Refresh();
    }

    private async Task EditTodo(int id, TodoListModel todoListItem)
    {
        if (!String.IsNullOrEmpty(todoListItem.Item))
        {
            await TodoListService.EditTodoItem(todoListItem, id);
        }
        IsEditing = new bool[todos.Count()];
    }

    private void SetIsEditing(int id)
    {
        for (int i = 0; i < IsEditing.Length; i++)
        {
            if (i == id)
            {
                IsEditing[i] = true;
            }
        }
    }
}
