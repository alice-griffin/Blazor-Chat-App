@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager
@using Models 
@using Data 

    @if(!IsConnected) { 
        <div class="container">
            <div class="top-bar">
                <div class="window-title">
                    <span class="">the computer</span>
                </div>
                <ul class="list-group">
                    <li>
                        <i class="material-icons">
                            question_mark
                        </i>
                    </li>
                    <li>
                        <i class="material-icons">
                            minimize
                        </i>
                    </li>
                    <li>
                        <i class="material-icons">
                            close
                        </i>
                    </li>
                </ul>
            </div>
            <div class="inner-window">
                <div>
                    <h3>Chat Room</h3>
                </div>
                <input type="text" placeholder="Username" @bind-value="usernameInput" />
                <input type="text" placeholder="Room" @bind-value="roomInput" />
                <button type="submit" @onclick="StartConnectionAsync" />
            </div>
        </div>
    } 
    else
    {
        <ChatRoom HubConnection="@hubConnection" UserMessages="@userMessages" UserConnection="@userConnection" OnRoomDisconnected="ConnectionChanged"/>
    }


@code {
    private HubConnection hubConnection;
    private string usernameInput;
    private string roomInput;
    private bool IsConnected { get; set; } = false;
    private UserConnection userConnection;
    public List<UserMessage> userMessages { get; set; } = new List<UserMessage>();

    private async Task StartConnectionAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chat")).Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => {
            userMessages.Add(new UserMessage { User = user, Message = message, DateSent = DateTime.Now });
            StateHasChanged();
        });

        userConnection = new UserConnection { User = usernameInput, Room = roomInput };
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinRoom", userConnection);
        IsConnected = hubConnection.State == HubConnectionState.Connected;
    }

    private void ConnectionChanged(bool isConnected)
    {
        IsConnected = isConnected;
        usernameInput = "";
        roomInput = "";
    }
}
